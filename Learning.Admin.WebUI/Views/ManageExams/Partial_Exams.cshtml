@using Learning.Entities.Domain;

@model PaginationResult<Learning.Tutor.ViewModel.TestViewModel>

@inject Learning.Admin.Abstract.IManageExamService manageExamService
@{
    var statuslist = manageExamService.GetAllStatuses().Select(p => new SelectListItem { Text = p.Status, Value = p.Id.ToString() });
}
<table class="display responsive nowrap" style="width:100%" id="examtable">
    <thead>
        <tr>
            <th>
                TestId
            </th>
            <th width="70">
                Title
            </th>
            <th>
                Grade
            </th>
            <th>
                Subject
            </th>
            <th>
                Dur.
            </th>

            <th>
                Tutor Username
            </th>
            <th>
                Status
            </th>
            <th>
                Created
            </th>
            <td></td>



        </tr>
    </thead>
    <tbody>
        @foreach (var item in Model.data)
        {
            string tutorName = "NA";
            if (!string.IsNullOrEmpty(item.TutorUserName))
            {
                tutorName = (item?.TutorUserName.Length > 18 ? item?.TutorUserName.Substring(0, 17) + "..." : item?.TutorUserName);
            }

            <tr>
                <td>
                    <span>@item.Id</span>
                </td>
                <td>
                    <a title="@item?.Title" href="CreateTest?Id=@item.Id">@(item?.Title.Length > 18 ? item?.Title.Substring(0, 17) + "..." : item?.Title)</a>
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.GradeName)
                </td>
                <td>
                   <label title="@item?.SubjectName"> @(item.SubjectName.Length > 18 ? item.SubjectName.Substring(0, 17) + "..." : item.SubjectName)</label>
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.Duration)
                </td>

                <td>
                   @tutorName
                </td>

                <td>
                    @*<select asp-items="@statuslist" onchange="changeteststatus(this)"></select>*@
                    @Html.DropDownListFor(m => item.StatusID, statuslist, new { @onchange = "changeteststatus(this)", @data_id = item.Id, @class = "form-control-sm" })
                </td>
                <td>
                    @Html.Label(item.Created.ToShortDateString())
                </td>
                <td>
                    <a href="/manageexams/CreateTest?id=@item.Id&ReturnUrl=/manageexams">
                        <i class="fa fa-eye text-info"> </i>
                    </a> |
                    <a href="DeleteTest?id=@item.Id"> <i class="fa fa-times-circle text-danger"></i></a>
                </td>


            </tr>
        }
    </tbody>
</table>
<script>
    function changeteststatus(cnt) {
        var testid = $(cnt).data('id');

        insertdata('/ManageExams/UpdateTestStatus', { testid: testid, statusid: cnt.value }).done(function (res) {
            if (res > 0) {
                notify('Status updated successfully.', 'success');
            } else {
                notify('There is no update to be processed.', 'warning');
            }
        });
    }
</script>
